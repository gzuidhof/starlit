/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */
package main

import (
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"

	"github.com/gzuidhof/starlit/starlit/internal/npm"
)

// This script generates a Go file that contains a mapping from vendored NPM package name (e.g. starboard-notebook) to the package name including the version number.

func main() {
	if len(os.Args) < 3 {
		log.Print("Not enough arguments, supply 2 arguments: the vendor folder, output file name")
		os.Exit(1)
	}
	vendorFolder := os.Args[1]
	outputFilename := os.Args[2]

	files, err := ioutil.ReadDir(vendorFolder)
    if err != nil {
        log.Fatal(err)
    }

	// Package name -> Package@Version
	// i.e.  starboard-notebook: starboard-notebook@0.9.4
	packages := make(map[string]string)

	mapLiteral := ""
 
    for _, f := range files {
		if (f.IsDir()) {
			name := f.Name()
			if !strings.Contains(name, "@") {
				continue
			}
			packageName, _ := npm.PackageIdToPackageAndVersion(name)

			_, exist := packages[packageName]

			if exist {
				panic("Multiple versions in the vendor folder for " + packageName)
			}

			packages[packageName] = name
			mapLiteral += fmt.Sprintf(`    "%s": "%s",`, packageName, name) + "\n"
		}
    }

	goPackageName := filepath.Dir(outputFilename)
	sourceFile := fmt.Sprintf(`// Code generated by index_vendored_packages; DO NOT EDIT
package %s

var vendoredLibraries = map[string]string {
%s
}

// Given "starboard-notebook", returns the package name with version "starboard-notebook@0.9.4"
func GetVendoredPackage(name string) string {
	return vendoredLibraries[name]
}
`, goPackageName, mapLiteral)

	err = ioutil.WriteFile(outputFilename, []byte(sourceFile), 0644)
	if err != nil {
		panic(err)
	}

	log.Printf("Generated %s", outputFilename)
}
